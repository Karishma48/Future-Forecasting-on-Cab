** Coding in Python

## Import the Libary 

import pandas as pd
import numpy as np
import random
from datetime import datetime, timedelta 
import matplotlib.pyplot as plt
import seaborn as sns

## Make First Random data in Python(Ride Data)

def generate_ride_data(num_rows):
    ride_data = []
    for i in range(num_rows):
        ride_id = i + 1
        ride_timestamp = (datetime.now() - timedelta(days=random.randint(0, 30))).strftime('%Y-%m-%d %H:%M:%S')
        fare = round(random.uniform(5, 50), 2)  # Fare between $5 and $50
        distance = round(random.uniform(1, 20), 2)  # Distance between 1 and 20 miles
        ride_count = random.randint(1, 5)  # Number of rides in the same time period
        ride_data.append([ride_id, ride_timestamp, fare, distance, ride_count])
    return pd.DataFrame(ride_data, columns=['ride_id', 'ride_timestamp', 'fare', 'distance', 'ride_count'])

ride_data = generate_ride_data(500)
print("Ride Data:\n", ride_data.head())

## Make Second Random data in Python(Wether Data)

def generate_weather_data(num_rows):
    weather_conditions = ['Clear', 'Cloudy', 'Rain', 'Snow', 'Fog']
    temperatures = [random.randint(-5, 35) for _ in range(num_rows)]  # Temperature between -5 and 35Â°C
    weather_data = []
    for i in range(num_rows):
        weather_condition = random.choice(weather_conditions)
        temperature = temperatures[i]
        weather_data.append([weather_condition, temperature])
    return pd.DataFrame(weather_data, columns=['weather_condition', 'temperature'])

weather_data = generate_weather_data(500)
print("\nWeather Data:\n", weather_data.head())


## Combine the both Data in one DataFrame

def generate_competitor_data(num_rows, fare_data):
    competitor_data = []
    for i in range(num_rows):
        competitor_price = round(fare_data[i] * random.uniform(0.8, 1.2), 2)  # Competitor price is within +/- 20% of fare
        competitor_data.append(competitor_price)
    return pd.DataFrame(competitor_data, columns=['competitor_price'])

competitor_data = generate_competitor_data(500, ride_data['fare'])
print("\nCompetitor Pricing Data:\n", competitor_data.head())

combined_data = pd.concat([ride_data, weather_data, competitor_data], axis=1)
print("\nCombined Dataset:\n", combined_data.head())

## Import the data

combined_data.to_csv("combined_ride_data.csv", index=False)

## Analyse the Dataset

combined_data.shape

combined_data.isnull().sum()

combined_data.info()

combined_data.head()

combined_data['ride_timestamp']=pd.to_datetime(combined_data['ride_timestamp'])
combined_data['time_of_day']=combined_data['ride_timestamp'].dt.hour

## Make new Column

def categroize_time(hour):
    if 5<=hour <12:
        return 'Morning'
    elif 12<=hour <17:
        return 'Afternoon'
    elif 17<=hour <21:
        return 'Evening'
    else:
        return 'Night'

combined_data['time_of_day_category'] =combined_data['time_of_day'].apply(categroize_time)

print(combined_data[['ride_timestamp','time_of_day', 'time_of_day_category']].head())

combined_data.info()

combined_data.set_index('ride_timestamp', inplace=True)

combined_data.head()


## Visulaization Work

1. Daily Ride Count Chart

combined_data['ride_count'].resample('D').sum().plot()
plt.title('Daily Ride Count')
plt.show()

2. Price VS Ride count

sns.scatterplot(x='competitor_price', y='ride_count', data=combined_data)
plt.title('Price vs. Ride Count')
plt.show()

## Improt Library for Prediction

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression

## Split the Data in two tables (X,Y)

x=combined_data[[ 'distance','temperature','competitor_price','time_of_day','ride_count']]
y=combined_data['fare']

##Split Data for training and testing

x_train,x_test, y_train,y_test= train_test_split(x,y,test_size=0.2,random_state=41)

## Make Prediction

model= LinearRegression()
model.fit(x_train,y_train)

model.score(x_train,y_train)*100

model.score(x_test,y_test)*100

predictons=model.predict(x_test)

from scipy.optimize import linprog

c=[-1* pred for pred in predictons]

A=[[...]]
b=[...]

import numpy as np

A_ub = np.array([[1, 2, 3], [4, 5, 6]])  # Create A_ub as a NumPy array
b_ub = np.array([7, 8])
c = np.array([1, 1, 1])

result = linprog(c, A_ub=A_ub, b_ub=b_ub, method='highs')
print(result)
